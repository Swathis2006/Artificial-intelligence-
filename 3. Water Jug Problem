from collections import deque

# Jug capacities and target
jug1, jug2, target = 4, 3, 2   # Example: 4L jug, 3L jug, target = 2L

def water_jug():
    visited = set()
    q = deque([((0, 0), [])])  # state = (x, y), path = list of steps

    while q:
        (x, y), path = q.popleft()

        if (x, y) in visited:
            continue
        visited.add((x, y))

        # Add current step
        path = path + [(x, y)]

        # Check goal
        if x == target or y == target:
            print("Steps to solve Water Jug Problem:")
            for step in path:
                print(step)
            return

        # All possible moves
        moves = [
            (jug1, y),                # Fill Jug1
            (x, jug2),                # Fill Jug2
            (0, y),                   # Empty Jug1
            (x, 0),                   # Empty Jug2
            (min(x + y, jug1), max(0, x + y - jug1)),  # Pour Jug2 -> Jug1
            (max(0, x + y - jug2), min(x + y, jug2))   # Pour Jug1 -> Jug2
        ]

        for move in moves:
            if move not in visited:
                q.append((move, path))

water_jug()
