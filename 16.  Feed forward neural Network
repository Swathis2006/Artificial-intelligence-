import numpy as np

# Sigmoid activation function
def sigmoid(x):
    return 1 / (1 + np.exp(-x))

# Derivative of sigmoid
def sigmoid_derivative(x):
    return x * (1 - x)

# Input dataset (4 samples, 3 features)
X = np.array([[0,0,1],
              [0,1,1],
              [1,0,1],
              [1,1,1]])

# Output dataset (4 samples, 1 output)
y = np.array([[0],[1],[1],[0]])

# Seed for reproducibility
np.random.seed(1)

# Initialize weights randomly (3 inputs -> 4 hidden -> 1 output)
weights_input_hidden = np.random.rand(3, 4)
weights_hidden_output = np.random.rand(4, 1)

# Learning rate
lr = 0.5

# Training loop
for epoch in range(10000):
    # Forward pass
    hidden_input = np.dot(X, weights_input_hidden)
    hidden_output = sigmoid(hidden_input)
    final_input = np.dot(hidden_output, weights_hidden_output)
    final_output = sigmoid(final_input)
    
    # Calculate error
    error = y - final_output
    
    # Backpropagation
    d_output = error * sigmoid_derivative(final_output)
    d_hidden = d_output.dot(weights_hidden_output.T) * sigmoid_derivative(hidden_output)
    
    # Update weights
    weights_hidden_output += hidden_output.T.dot(d_output) * lr
    weights_input_hidden += X.T.dot(d_hidden) * lr

# Print final output
print("Predicted Output:\n", final_output)
