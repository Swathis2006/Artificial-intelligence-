N = 8  # Number of queens

# Function to print the board
def print_board(board):
    for row in board:
        print(" ".join("Q" if x else "." for x in row))
    print()

# Check if placing a queen is safe
def is_safe(board, row, col):
    for i in range(row):
        if board[i][col]:  # same column
            return False
        if col-(row-i) >= 0 and board[i][col-(row-i)]:  # left diagonal
            return False
        if col+(row-i) < N and board[i][col+(row-i)]:  # right diagonal
            return False
    return True

# Solve using backtracking
def solve(board, row=0):
    if row == N:
        print_board(board)
        return True
    for col in range(N):
        if is_safe(board, row, col):
            board[row][col] = 1
            if solve(board, row+1):
                return True
            board[row][col] = 0
    return False

# Initialize board and solve
board = [[0]*N for _ in range(N)]
solve(board)
